#Busqueda primero en anchura
class Grafo:
	vertices = {}
	def agregarVertice(self,vertice):
		if isinstance(vertice, Vertice) and vertice.nombre not in self.vertices:
			self.vertices[vertice.nombre] = vertice
			return True
		else:
			return False

	def agregarArista(self,u,v):
		if u in self.vertices and v in self.vertices:
			for key, value in self.vertices.items(): 
				if key == u:
					value.AgregarVecino(v)
				if key == v:
					value.AgregarVecino(u)
			return True
		else:
			return False


	def ImprimeGrafo(self):
		for key in sorted(list(self.vertices.keys())):
			print("\nVertice " + key + ", Sus vecinos son " + str(self.vertices[key].vecinos))
			print("\nLa distancia de A a " + key + " es: " + str(self.vertices[key].distancia))


class Vertice:
	def __init__(self,n):
		self.nombre = n
		self.vecinos = list()
		self.distancia = 9999
		self.color = "white"
		self.pred = -1


	def AgregarVecino(self,v):
		if v not in self.vecinos:
			self.vecinos.append(v)
			self.vecinos.sort()


	def BFS (self, vert):
		vert.distancia = 0
		vert.color = "gris"
		vert.pred = -1
		q = list()

		q.append(vert.nombre)

		while len(q) > 0:
			
			u = q.pop()
			node_u = self.vertices[u]
			for v in node_u.vecinos:
				node_v = self.vertices[v]
				if node_v.color == "white":
					node_v.color = "gris"
					node_v.distancia = node_u.distancia + 1
					node_v.pred = node_u.nombre
					q.append(v)
			self.vertices[u].color = "black"



class Controladora:
	def main(self):
		g = Grafo()
		a = Vertice('a')
		g.agregarVertice(a)

		for i in range(ord('a'), ord('h')):
			g.agregarVertice(Vertice(chr(i)))

		edges = ["ab","ac","ad","be","cd","ce","cf","df","ef","eg","fg"]

		for edge in edges:
			g.agregarArista(edge[:1],edge[1:])
		g.ImprimeGrafo()

obj = Controladora()
obj.main()
